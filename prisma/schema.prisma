// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  email        String       @unique
  cards        Card[]       @relation("UserCards")
  updatedCards Card[]       @relation("CardUpdatedBy")
  battles      CardBattle[] @relation("UserBattles")

  @@map("users")
}

model Card {
  id               String       @id @default(uuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  cardCode         String       @unique
  expansion        String
  name             String
  image            String
  hp               Int
  attack           Int
  type             String
  resist           String
  weak             String
  userId           String
  updatedBy        String?
  user             User?        @relation("UserCards", fields: [userId], references: [id])
  updater          User?        @relation("CardUpdatedBy", fields: [updatedBy], references: [id])
  battlesAsChosen  CardBattle[] @relation("CardChosen")
  battlesAsAgainst CardBattle[] @relation("CardAgainst")

  @@map("cards")
}

model CardBattle {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  cardChosenId  String
  cardAgainstId String
  result        Boolean
  userId        String
  user          User     @relation("UserBattles", fields: [userId], references: [id])
  chosenCard    Card     @relation("CardChosen", fields: [cardChosenId], references: [id])
  againstCard   Card     @relation("CardAgainst", fields: [cardAgainstId], references: [id])

  @@map("card_battles")
}
